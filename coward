#!/usr/bin/env python

import sys
import os
from os.path import basename
import copy
import re
import subprocess
import argparse
import yaml
from time import strftime
import textwrap


VALID_COMMANDS = ['all', 'snapshot', 'prune', 'push', 'pull', 'rsync']
DEFAULT_CONFIG_FILE = '/etc/coward.yaml'


def btrfs_subvolume_list(mountpoint):
    # 'btrfs su li <path>' outputs something like
    # ID 305 gen 18482 top level 5 path @rootfs

    exec_cmd = ['btrfs', 'subvolume', 'list', mountpoint]
    output = subprocess.check_output(exec_cmd, stderr=subprocess.STDOUT)
    subvolumes = [x.split(' ')[8] for x in output.splitlines()]

    return subvolumes


def remote_btrfs_subvolume_list(server, mountpoint):
    # 'btrfs su li <path>' outputs something like
    # ID 305 gen 18482 top level 5 path @rootfs

    exec_cmd = ['ssh', server, 'btrfs subvolume list ' + mountpoint]
    output = subprocess.check_output(exec_cmd, stderr=subprocess.STDOUT)
    subvolumes = [x.split(' ')[8] for x in output.splitlines()]

    return subvolumes


def remote_ls(server, path):
    exec_cmd = ['ssh', server, 'ls ' + path]
    output = subprocess.check_output(exec_cmd, stderr=subprocess.STDOUT)

    return output.splitlines()


def cmd_exists(cmd):
    return subprocess.call("type " + cmd, shell=True, \
            stdout=subprocess.PIPE, stderr=subprocess.PIPE) == 0


def optional_option(option_dict, option_name, option_default):
    if option_name in option_dict:
        return option_dict[option_name]
    else:
        return option_default


def command_all(params):
    global config
    global simulate

    if params:
        raise Exception('The command \'all\' does not expect any parameters, but got \'%s\'.' % str(params))

    command_rsync(None)
    command_snapshot(None)
    command_pull(None)
    command_push(None)
    command_prune(None)


def command_prune(params):
    global config
    global list_targets
    global simulate

    if not 'prune' in config:
        if list_targets:
            return
        raise Exception('The config file doesn\'t contain any prune targets.')

    prune_cfg = config['prune']

    if list_targets:
        print('  prune:' + ','.join(prune_cfg.keys()))
        return

    if params:
        targets = params.split(',')
    else:
        targets = prune_cfg.keys()

    for target in targets:
        if target not in prune_cfg.keys():
            raise Exception('The prune target \'%s\' does not exist.' % target)

        if target == 'show-kept':  # reserved option name
            continue

        regexes = prune_cfg[target]['keep']
        mountpoint = prune_cfg[target]['mountpoint']
        directory = optional_option(prune_cfg[target], 'dir', '')
        show_kept = optional_option(prune_cfg, 'show-kept', False)

        subvolumes = btrfs_subvolume_list(mountpoint)
        if directory:
            subvolumes = [x for x in subvolumes if x.startswith(directory)]
        # newest first
        subvolumes.sort(reverse=True)

        keep = []

        for regex in regexes.keys():
            keepcount = regexes[regex]

            # search for subvolumes that match the regex, then keep the first <keepcount> of them
            matches = [x for x in subvolumes if re.search(regex, x)][:keepcount]

            keep += matches

        keep = set(keep)
        subvolumes = set(subvolumes)
        subvolumes_to_delete = subvolumes - keep

        if show_kept:
            for subvolume in sorted(keep):
                print('# keeping ' + subvolume)

        # sort set so oldest subvolumes are deleted first
        # -> more time to press Ctrl+C ;)
        for subvolume in sorted(subvolumes_to_delete):
            exec_cmd = ['btrfs', 'subvolume', 'delete', os.path.join(mountpoint, subvolume)]

            if simulate or verbose:
                print(' '.join(exec_cmd))

            if not simulate:
                subprocess.check_call(exec_cmd)


def command_pull(params):
    global config
    global list_targets
    global simulate
    global show_progress

    if not 'pull' in config:
        if list_targets:
            return
        raise Exception('The config file doesn\'t contain any pull targets.')

    pull_cfg = config['pull']

    if list_targets:
        print('  pull:' + ','.join(pull_cfg.keys()))
        return

    if params:
        targets = params.split(',')
    else:
        targets = pull_cfg.keys()

    for target in targets:
        if target not in pull_cfg.keys():
            raise Exception('The pull target \'%s\' does not exist.' % target)

        src_server = pull_cfg[target]['src-server']
        mountpoint = pull_cfg[target]['src-mountpoint']
        dest_path = pull_cfg[target]['dest-path']
        directory = optional_option(pull_cfg[target], 'src-dir', '')
        incremental = optional_option(pull_cfg[target], 'incremental', False)
        exclude_existing = optional_option(pull_cfg[target], 'exclude-existing', True)
        pullcount = optional_option(pull_cfg[target], 'selection-count', None)
        regex = optional_option(pull_cfg[target], 'selection-regex', '.*')

        subvolumes = remote_btrfs_subvolume_list(src_server, mountpoint)
        if directory:
            subvolumes = [x for x in subvolumes if x.startswith(directory)]
        # newest first
        subvolumes.sort(reverse=True)

        # keep one more subvolume than <pullcount> as a -p reference for incremental copying
        subvolumes_to_pull = [x for x in subvolumes if re.search(regex, x)]

        if pullcount:
            subvolumes_to_pull = subvolumes_to_pull[:(pullcount+1)]

        # oldest first
        subvolumes_to_pull.sort()

        # The first element is now either the "reference-only" snapshot or else the only snapshot to be transferred.
        # Determine which and set the start index accordingly:
        max_index = len(subvolumes_to_pull)
        if max_index == 1 and not incremental:
            start_index = 0
        else:
            start_index = 1

        for i in range(start_index, max_index):
            subvolume = subvolumes_to_pull[i]

            # skip if the current subvolume already exists in dest_path
            # (unless exclude_existing has explicitly been disabled)
            subvolume_basename = basename(subvolume)
            if exclude_existing and os.path.exists(os.path.join(dest_path, subvolume_basename)):
                continue

            remote_cmd = 'btrfs send '
            if incremental:
                remote_cmd += '-p ' + os.path.join(mountpoint, subvolumes_to_pull[i-1]) + ' '
            remote_cmd += os.path.join(mountpoint, subvolume)
            if show_progress:
                if sys.stdout.isatty() and cmd_exists('pv'):
                    progress_cmd = ' pv |'
                else:
                    progress_cmd = ' dd |'
            else:
                progress_cmd = ''
            exec_cmd = 'ssh %s "%s" |%s btrfs receive %s' % (src_server, remote_cmd, progress_cmd, dest_path)

            if simulate or verbose:
                print(exec_cmd)

            if not simulate:
                subprocess.check_call(exec_cmd, shell=True)


def command_push(params):
    global config
    global list_targets
    global simulate
    global show_progress

    if not 'push' in config:
        if list_targets:
            return
        raise Exception('The config file doesn\'t contain any push targets.')

    push_cfg = config['push']

    if list_targets:
        print('  push:' + ','.join(push_cfg.keys()))
        return

    if params:
        targets = params.split(',')
    else:
        targets = push_cfg.keys()

    for target in targets:
        if target not in push_cfg.keys():
            raise Exception('The push target \'%s\' does not exist.' % target)

        mountpoint = push_cfg[target]['src-mountpoint']
        dest_server = push_cfg[target]['dest-server']
        dest_path = push_cfg[target]['dest-path']
        directory = optional_option(push_cfg[target], 'src-dir', '')
        incremental = optional_option(push_cfg[target], 'incremental', False)
        exclude_existing = optional_option(push_cfg[target], 'exclude-existing', False)
        pushcount = optional_option(push_cfg[target], 'selection-count', None)
        regex = optional_option(push_cfg[target], 'selection-regex', '.*')

        if exclude_existing:
            existing = remote_ls(dest_server, dest_path)
            existing = [basename(x) for x in existing]

        subvolumes = btrfs_subvolume_list(mountpoint)
        if directory:
            subvolumes = [x for x in subvolumes if x.startswith(directory)]
        # newest first
        subvolumes.sort(reverse=True)

        # keep one more subvolume than <pushcount> as a -p reference for incremental copying
        subvolumes_to_push = [x for x in subvolumes if re.search(regex, x)]

        if pushcount:
            subvolumes_to_push = subvolumes_to_push[:(pushcount+1)]

        # oldest first
        subvolumes_to_push.sort()

        # The first element is now either the "reference-only" snapshot or else the only snapshot to be transferred.
        # Determine which and set the start index accordingly:
        max_index = len(subvolumes_to_push)
        if max_index == 1 and not incremental:
            start_index = 0
        else:
            start_index = 1

        for i in range(start_index, max_index):
            subvolume = subvolumes_to_push[i]

            if exclude_existing and basename(subvolume) in existing:
                continue

            exec_cmd = 'btrfs send '
            if incremental:
                exec_cmd += '-p ' + os.path.join(mountpoint, subvolumes_to_push[i-1]) + ' '
            exec_cmd += os.path.join(mountpoint, subvolume)
            if show_progress:
                if sys.stdout.isatty() and cmd_exists('pv'):
                    exec_cmd += ' | pv'
                else:
                    exec_cmd += ' | dd'
            exec_cmd += ' | ssh ' + dest_server + ' "btrfs receive ' + dest_path + '"'

            if simulate or verbose:
                print(exec_cmd)

            if not simulate:
                subprocess.check_call(exec_cmd, shell=True)


def command_snapshot(params):
    global config
    global list_targets
    global simulate

    if not 'snapshot' in config:
        if list_targets:
            return
        raise Exception('The config file doesn\'t contain any snapshot targets.')

    snapshot_cfg = config['snapshot']

    if list_targets:
        print('  snapshot:' + ','.join(snapshot_cfg.keys()))
        return

    if params:
        targets = params.split(',')
    else:
        targets = snapshot_cfg.keys()

    for target in targets:
        if target not in snapshot_cfg.keys():
            raise Exception('The snapshot target \'%s\' does not exist.' % target)

        src = snapshot_cfg[target]['src']
        dest = snapshot_cfg[target]['dest']
        readonly = optional_option(snapshot_cfg[target], 'readonly', False)

        exec_cmd = ['btrfs', 'subvolume', 'snapshot']
        if readonly:
            exec_cmd.append('-r')
        exec_cmd.append(src)
        exec_cmd.append(strftime(dest))

        if simulate or verbose:
            print(' '.join(exec_cmd))

        if not simulate:
            subprocess.check_call(exec_cmd)


def command_rsync(params):
    global config
    global list_targets
    global simulate
    global show_progress

    if not 'rsync' in config:
        if list_targets:
            return
        raise Exception('The config file doesn\'t contain any rsync targets.')

    rsync_cfg = config['rsync']

    if list_targets:
        print('  rsync:' + ','.join(rsync_cfg.keys()))
        return

    if params:
        targets = params.split(',')
    else:
        targets = rsync_cfg.keys()

    for target in targets:
        if target not in rsync_cfg.keys():
            raise Exception('The rsync target \'%s\' does not exist.' % target)

        src = rsync_cfg[target]['src']
        dest = rsync_cfg[target]['dest']
        no_default_opts = optional_option(rsync_cfg[target], 'no-default-options', False)
        options = optional_option(rsync_cfg[target], 'options', '')
        tries = optional_option(rsync_cfg[target], 'tries', 1)

        exec_cmd = ['rsync']
        if show_progress:
            exec_cmd += ['--progress']
        if not no_default_opts:
            exec_cmd += ['--archive', '--hard-links', '--inplace', '--delete', '--delete-excluded', '--numeric-ids', '--acls', '--xattrs']
        if options:
            exec_cmd += options.split(' ')
        exec_cmd.append(src)
        exec_cmd.append(strftime(dest))

        for i in xrange(tries):
            if simulate or verbose:
                print(' '.join(exec_cmd))

            if simulate:
                break
            else:
                try:
                    subprocess.check_call(exec_cmd)
                    break
                except:
                    # only pass on the exception (and terminate the program) if
                    # the maximum number of retries has been reached
                    if i == tries - 1:
                        raise


def main():
    global config
    global list_targets
    global simulate
    global verbose
    global show_progress

    parser = argparse.ArgumentParser(
            formatter_class=argparse.RawDescriptionHelpFormatter,
            description='coward: automate btrfs backups\nRequires root privileges (to run btrfs-progs).',
            epilog=textwrap.dedent('''\
                Supported commands:
                    all:        Run 'rsync', 'snapshot', 'pull', 'push' and 'prune' for all
                                respective targets (in this order).
                    rsync:      Copy files using rsync.
                    snapshot:   Create btrfs snapshots for the specified targets.
                    pull:       Copy snapshots from a remote server using 'btrfs send/receive'
                                and SSH.
                    push:       Copy snapshots to a remote server using 'btrfs send/receive'
                                and SSH.
                    prune:      Delete snapshots according to the target's 'keep' configuration
                                ("keep the last n snapshots matching this regex").

                Targets are always specified in the form 'command:target1,target2'.
                If no targets are specified, all targets for the selected command are processed.''')
            )
    parser.add_argument("--config", "-c", help="Specify the path to an alternate config file. By default, /etc/coward.yaml is used.")
    parser.add_argument("--verbose", "-v", action="store_true", help="Print all commands before executing them.")
    parser.add_argument("--progress", "-p", action="store_true", help="Prints progress information while transfering data (for rsync, pull and push).")
    parser.add_argument("--dump-config", "-d", action="store_true", help="Dump the config after reading and parsing it, then terminate.")
    parser.add_argument("--show-kept", "-k", action="store_true", help="With the 'prune' command, print a list of snapshots that have been kept.")
    parser.add_argument("--simulate", "-s", "--dry-run", action="store_true", help="Show the commands that would be executed, but don't actually run them.")
    parser.add_argument("--list", "-l", action="store_true", help="Show a list of all targets for the given command(s) (or all commands if the command 'all' is given).")
    parser.add_argument('commands', nargs='+')

    args = parser.parse_args()
    commands = [x.split(':') for x in args.commands]

    if os.geteuid() != 0:
        raise Exception('You need to have root privileges to run this script.')

    # terminate on invalid parameters
    for command in commands:
        if command[0] not in VALID_COMMANDS:
            raise Exception('\'%s\' is not a valid command (or not supported by this version of coward)' % command[0])

    config_file = args.config or DEFAULT_CONFIG_FILE
    if not os.path.isfile(config_file):
        raise Exception('Config file \'%s\' does not exist or is not a file.' % config_file)
    f = open(config_file)
    config = yaml.safe_load(f)
    f.close()

    # postprocess config: replace %= with target name in all option values
    if 'resolve-references' in config and config['resolve-references']:
        for cfg_command in config:
            # skip elements that aren't iterable
            if not hasattr(config[cfg_command], '__iter__'):
                continue

            for cfg_target in config[cfg_command]:
                # skip elements that aren't iterable
                if not hasattr(config[cfg_command][cfg_target], '__iter__'):
                    continue

                # replace references generated by the yaml parser with actual data
                config[cfg_command][cfg_target] = copy.deepcopy(config[cfg_command][cfg_target])

                for cfg_option in config[cfg_command][cfg_target]:
                    if type(config[cfg_command][cfg_target][cfg_option]) is str:
                        config[cfg_command][cfg_target][cfg_option] = config[cfg_command][cfg_target][cfg_option].replace('%=', cfg_target)

    if args.show_kept and 'prune' in config:
        config['prune']['show-kept'] = True

    if args.dump_config:
        import json
        print(json.dumps(config, indent=4))
        sys.exit(0)

    list_targets = args.list
    if list_targets:
        print('# The following targets have been defined in the configuration file:')

    simulate = args.simulate
    if simulate:
        print('# Simulation mode. These are the commands that would have been run (if any):')

    verbose = args.verbose
    show_progress = args.progress

    # begin actual work
    for command in commands:
        # Directly call the handler function for the current command.
        # This is safe because we validated command[0] against VALID_COMMANDS earlier.

        handler_function_name = 'command_' + command[0]

        if not handler_function_name in globals():
            raise Exception('The function \'%s\' could not be found. This is definitely a bug.' % handler_function_name)

        handler_function = globals()[handler_function_name]
        if len(command) > 1:
            handler_function_params = command[1]
        else:
            handler_function_params = None
        handler_function(handler_function_params)


if __name__ == "__main__":
    main()
